@using LetterAmazer.Websites.Client.Extensions
@model LetterAmazer.Websites.Client.ViewModels.OrderDetailViewModel

@section header {
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/base/jquery-ui.css")" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-ui-1.10.3.min.js")"></script>
}

<div class="jumbotron-white">
    <div class="container">
        <h2>Details for the  @Model.Id</h2>
        <p><a href="@Url.Action("Index")">Go back to the dashboard</a></p>
        <h3>Details of the order</h3>
        <dl>
            <dt>Status:</dt>
            <dd>Model.OrderStatus.ToString()</dd>
            <dt>Created:</dt>
            <dd>@Model.DateCreated.ToFriendlyDateTime()</dd>
            <dt>Last updated:</dt>
            <dd>@Model.DateModified.ToFriendlyDateTime()</dd>
        </dl>

        <h3>Details of the letter</h3>

        <h4>Letter</h4>
        <p><a href="@Url.Action("Download", new { id = Model.Id })">Download content</a></p>
        <div class="row">
            <div class="col-lg-6">
                <h4>Details of recepient</h4>
                <p>
                    <b>Att</b>
                    @if (!string.IsNullOrEmpty(Model.AddressInfo.AttPerson))
                    {
                        @Model.AddressInfo.AttPerson
                    }
                    else
                    {
                        @Model.AddressInfo.FirstName @Model.AddressInfo.LastName   
                    }
                    <br />
                    @Model.AddressInfo.Address1
                    <br />
                    @Model.AddressInfo.Zipcode @Model.AddressInfo.City
                    <br />
                    @Model.AddressInfo.Country.Name
                </p>
                <h4>Details of printing</h4>
                <dl>
                    <dt>Color:</dt>
                    <dd>@Model.LetterDetails.LetterColor.ToString()</dd>
                    <dt>Paper type:</dt>
                    <dd>@Model.LetterDetails.LetterProcessing.ToString()</dd>
                    <dt>Printing quality:</dt>
                    <dd>@Model.LetterDetails.LetterSize.ToString()</dd>
                    <dt>Letter paper weight:</dt>
                    <dd>@Model.LetterDetails.LetterPaperWeight.ToString()</dd>
                    <dt>Letter type:</dt>
                    <dd>@Model.LetterDetails.LetterType.ToString()</dd>

                </dl>
            </div>
            <div class="col-lg-6">
                <h4>Status of letter</h4>
                <dl>
                    <dt>@Model.DateCreated.ToFriendlyDateTime():</dt>
                    <dd>Order was created</dd>


                    @if (Model.DateSent.HasValue)
                    {
                        <dt>@Model.DateSent.Value.ToFriendlyDateTime():</dt>
                        <dd>Order was sent</dd>
                            
                    }

                </dl>
                
                <h4>Price</h4>
                Price ex. VAT: @Math.Round(Model.Price.PriceExVat,2) EUR<br/>
                Vat (@(Model.Price.VatPercentage*100) %): @Math.Round(Model.Price.VatPrice,2) EUR<br/>
                Total: @Math.Round(Model.Price.Total,2) EUR<br/>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    
</script>
