@using LetterAmazer.Business.Utils.Helpers
@model LetterAmazer.Websites.Client.ViewModels.User.SendWindowedLetterViewModel

@using (Html.BeginForm("SendWindowedLetter", "SingleLetter", FormMethod.Post, new { id = "sendLetterForm" }))
{
    <h2>1. Upload files</h2>

    <div class="dashboardBox" style="text-align: left;">
        <p>Please check the preview of the letters at the bottom. Make sure you have positioned the recipient’s address in the correct spot.</p>
        <p>This is meant for separate letters. If you need to merge them into a single PDF, you can use <a href="http://www.ilovepdf.com/merge_pdf" target="_blank">IlovePdf</a> or <a href="https://smallpdf.com/merge-pdf" target="_blank">SmallPdf</a>.</p>
        <div style="max-width: 700px">
            <div id="myDropzone" class="la-dropzone">
                <div class="dz-default dz-message">
                    <span>
                        Drag and drop your PDF files, or click here to upload your file
                    </span>
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.UploadFile, new Dictionary<string, object> { { "data-bind", "value:selectedFiles()" } })

    </div>


    <h2>2. Pick a country and a payment method</h2>

    <div class="row">
        <div class="col-md-5">
            <div class="dashboardBox" style="text-align: left;">
                <p>Select the country we should send this letter to:</p>
                <div>

                    @Html.DropDownListFor(model => model.SelectedCountry, Model.Countries, new Dictionary<string, object> { { "class", "form-control sendaletter_countrylist" }, { "data-bind", "value:countryId" } })
                    @Html.HiddenFor(m => m.DestinationCountryId, new Dictionary<string, object> { { "data-bind", "value:countryId" } })

                </div>

                <p>Select payment method</p>
                @Html.DropDownListFor(model => model.PaymentMethodId, Model.PaymentMethods, new Dictionary<string, object>{{ "class", "form-control" }, { "data-bind","value:paymentMethodId"} })
                @Html.HiddenFor(m => m.PaymentMethodId, new Dictionary<string, object> { { "data-bind", "value:paymentMethodId" } })

            </div>
        </div>
    </div>
    
    <div>
        <div data-bind="foreach: officeProductList()">
            <h3><label data-bind="text: title"></label></h3>

        </div>
    </div>
    
    <div>

        <h2>3. Summary and send letters</h2>

        <div class="dashboardBox" style="text-align: left;">
         

            <div class="row">
                <div class="col-md-5">
                    <dl>
                        <div data-bind="visible: doneLoading()">
                            @if (!Model.IsLoggedIn)
                            {
                                <p>
                                    Enter your e-mail:<br />
                                    @Html.TextBoxFor(model => model.Email)
                                </p>

                                <p>
                                    Where are you from?<br />
                                    @Html.DropDownListFor(model => model.SelectedOriginCountry, Model.Countries, new Dictionary<string, object> { { "class", "form-control origin_countrylist" }, { "data-bind", "value:originCountryId" } })
                                    @Html.HiddenFor(m => m.SelectedOriginCountry, new Dictionary<string, object> { { "data-bind", "value:originCountryId" } })
                                </p>

                            }

                            <dt>Amount of letters</dt>
                            <dd><span data-bind="text: letters().length"></span></dd>
                            <dt>Price</dt>
                            <dd>

                                <label id="priceOfLetterLbl" data-bind="text: getPriceExVat()"></label> EUR (<label id="priceOfLetterLbl" data-bind="text: getPriceTotal()"></label> EUR inc. local VAT)
                                
                            </dd>
                            <dt>
                                Shipping time
                            </dt>
                            <dd><span data-bind="text: shippingDays()"></span> Weekday(s)</dd>    
                        </div>
                        
                    </dl>
                    
                    <div data-bind="visible: isCreditsEnough()">
                        <input type="submit" value="Send letters now" class="btn btn-success btn-lg" data-bind="visible: status() && doneLoading()" />    
                        <br/><br/>
                        <i>Please verify the address field of your letters, is inside the gray rectangle (see below)</i>
                    </div>
                    <div data-bind="visible: !isCreditsEnough()" class="alert alert-warning">
                        <p>You have selected credits as a payment method, but you do not have enough credits to send this order.</p>
                        <p>Please select a new payment method, or insert some more money.</p>
                    </div>
                    
                    <div data-bind="visible: !doneLoading()">
                        <img src="@Url.Content("~/Content/images/icons/ajax-loader.gif")"/>
                    </div>

                    <div data-bind="visible: !status() && letters().length > 0" class="alert alert-danger" style="margin-top:8px;">
                        <p>Whooops. There is a problem with one of your letters.</p>
                        
                        <p>Scroll down to see the problem.</p>
                    </div>
                </div>
            </div>
        </div>


        <h2><label data-bind="text: letters().length"></label> Letters ready to be sent</h2>


        <div data-bind="foreach: letters()">
            <div class="dashboardBox" style="text-align: left;">
                <div class="row">
                    <div class="col-md-6 pull-left">
                        
                        <div data-bind="visible: uploadStatus() != 'success'" class="alert alert-danger">
                            <p>Whooops. There is a problem with this letter.</p>

                            <p>Please make sure the following requirements are met:</p>
                            <ul>
                                <li>The PDF file is below 25mb</li>
                                <li>The PDF file contains 15 pages or less</li>
                                <li>The PDF file is not corrupt</li>
                            </ul>
                        </div>

                        <h3><label data-bind="text: filePath"></label></h3>
                        
                        Status: <label data-bind="text: uploadStatus()"></label><br/>
                        Pages in letter: <label data-bind="text: numberOfPages()"></label><br />

                        <h4>Price</h4>
                        Price (ex vat): <label data-bind="text: priceExVat"></label> EUR<br />
                        Price (total): <label data-bind="text: priceTotal"></label> EUR

                        <br /><br />
                        <a data-bind="attr: { file_id: filePath}" id="deleteFile" class="deleteFile" style="cursor:pointer;">Delete letter</a>
                    </div>
                    <div class="col-md-6 pull-right">
                        <a data-bind="attr:{href: thumbnail()}" target="_blank">
                            <img data-bind="attr:{src: thumbnail()}" style="max-width:240px;" />
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @Html.HiddenFor(model => model.LetterType)
    @Html.HiddenFor(model => model.UseUploadFile)
}

<script>
    /// this is an object that holds the filenames of client and server, so we can lookup the values
    var fileList = {};

    var createLetterData = {
        userCredits: '@Model.UserCredits',
        creditPaymentMethodId: '2'
    };

    var viewModel = new SendWindowedLetterViewModel('#sendLetterForm', createLetterData);
    ko.applyBindings(viewModel, document.getElementById('sendLetterForm'));

    $('div#myDropzone').dropzone({
        url: '@Url.Action("Upload", "SingleLetter")',
        acceptedFiles: 'application/pdf',
        maxFilesize: 100,
        addRemoveLinks: true,
        dictRemoveFile: 'Remove file',
        fallback: function () {
            $('div#myDropzone').hide();
            $('div#uploadFallbackPanel').show();
        },
        success: function (file, data) {
            var template = file.previewTemplate;
            if (data.status == "success") {
                $(template).find('.dz-progress').hide();
                $(template).find('.dz-details img').attr({
                    'src': '@Url.Content("~/Content/images/icons/pdf-icon.png")',
                    'height': '100',
                    'style': 'margin-top: 28px; margin-left: 20px; height: 65px; width: 65px; display: block;'
                });
                
                //originCountryId
                var uploadedLetter = new letter(data.key, '', viewModel.countryId(), viewModel.originCountryId());
                viewModel.letters.push(uploadedLetter);

                viewModel.updateAllPrices();

                cleanString(file.name);

            } else {
                $(template).find('.dz-error-message').remove();
                $(template).addClass('dz-error');
                $(template).find('.dz-error-mark').on('click', function () {
                    $(template).remove();
                });
                viewModel.uploadFileKey('');
            }
        },
        error: function (file, responseText) {
            var template = file.previewTemplate;
            $(template).remove();
            viewModel.uploadFileKey.remove(file);

        },
        removedfile: function (file) {
            var vLetters = viewModel.letters();
            for (var i = 0; i < vLetters.length; i++) {
                var lookup = fileList[file.name].serverFileName;
                if (vLetters[i].filePath == lookup) {
                    viewModel.letters.splice(i, 1);
                    continue;
                }
            }
            delete fileList[file.name];

            var template = file.previewTemplate;
            $(template).remove();
            viewModel.updateAllPrices();
        }
    });

    $('#fileUpload').uploadify({
        'buttonText': 'Select PDF',
        'fileTypeDesc': 'PDF Files',
        'fileTypeExts': '*.pdf',
        'fileObjName': 'uploadFile',
        'removeCompleted': false,
        'multi': true,
        'swf': '@Url.Content("~/Scripts/uploadify/uploadify.swf")',
        'uploader': '@Url.Action("Upload", "SingleLetter")'
    });

    $('body').on('click', 'a.deleteFile', function () {
        var val = $(this).attr('file_id');

        var vLetters = viewModel.letters();
        for (var i = 0; i < vLetters.length; i++) {
            if (vLetters[i].filePath == val) {
                viewModel.letters.splice(i, 1);
                continue;
            }
        }

        for (var file in fileList) {
            var obj = fileList[file];
            if (obj.serverFileName == val) {
                var template = 'div.dz-preview:contains(' + obj.fileName + ')';
                $(template).remove();
                delete fileList[obj.fileName];
            }
        }
    });


    $(document).ready(function () {
        $('.sendaletter_countrylist').change(function () {    
            var countryId = viewModel.countryId();
            viewModel.updateLetterCountry(countryId);
            viewModel.updateAllPrices();
        });

        $('.origin_countrylist').change(function () {
            var countryId = viewModel.originCountryId();
            viewModel.updateOriginCountry(countryId);
            viewModel.updateAllPrices();
        });

        viewModel.updateOfficeProducts();
    });

    function cleanString(str) {
        return $.ajax({
            url: '/SingleLetter/StripString',
            type: 'POST',
            async: false,
            data: {
                'str': str
            },
            dataType: 'json',
            success: function (data) {
                fileList[str] = { "serverFileName": data.str, "fileName": str };
            }
        });
    }
</script>
