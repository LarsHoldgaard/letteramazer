@using LetterAmazer.Business.Utils.Helpers
@model LetterAmazer.Websites.Client.ViewModels.User.SendWindowedLetterViewModel

@using (Html.BeginForm("SendWindowedLetter", "SingleLetter", FormMethod.Post, new { id = "sendLetterForm" }))
{
    <h2>1. Upload files</h2>

    <div class="dashboardBox" style="text-align: left;">

        <p><b>Make sure the recepient address is positioned correct</b>. Upload a single PDF document and see the preview below to verify its position.</p>
        <div style="max-width: 700px">
            <div id="myDropzone" class="la-dropzone">
                <div class="dz-default dz-message">
                    <span>
                        Drag and drop your PDF files, or click here to upload your file
                    </span>
                </div>
            </div>
        </div>
        @*@Html.HiddenFor(m => m.UploadFile, new Dictionary<string, object> { { "data-bind", "value:uploadFileKey()" } })*@
        @Html.HiddenFor(m => m.UploadFile, new Dictionary<string, object> { { "data-bind", "value:selectedFiles()" } })

    </div>


    <h2>2. Pick a country and a payment method</h2>

    <div class="row">
        <div class="col-md-5">
            <div class="dashboardBox" style="text-align: left;">
                <p>Select the country we should send this letter to:</p>
                <div>

                    @Html.DropDownListFor(model => model.SelectedCountry, Model.Countries, new Dictionary<string, object> { { "class", "form-control sendaletter_countrylist" }, { "data-bind", "value:countryId" } })
                    @Html.HiddenFor(m => m.DestinationCountryId, new Dictionary<string, object> { { "data-bind", "value:countryId" } })

                </div>

                <p>Select payment method</p>
                @Html.DropDownListFor(model => model.PaymentMethodId, Model.PaymentMethods, new { @class = "form-control" })

            </div>
        </div>
    </div>
    @*<div data-bind="visible: getUploadStatus() == 'failure'" class="alert alert-error" style="margin-top: 10px;">
            <h2>This PDF file cannot be sent</h2>
            <p>
                Please make sure the following requirements are met:
            </p>
            <ul>
                <li>The PDF file is below 25mb</li>
                <li>The PDF file contains 7 pages or less</li>
                <li>The PDF file are being sent to Denmark</li>
            </ul>
        </div>

        <div data-bind="visible: getPriceExVat() <= 0.0">
            <h2>3. Send this letter</h2>

            <div class="alert alert-warning">

                <p>Please upload a letter, before you can send it.</p>
            </div>
        </div>*@

    //data-bind="visible: getUploadStatus() == 'success'"
    <div>

        <h2>3. Summary and send letters</h2>
        
        <div class="dashboardBox" style="text-align: left;">
            @if (!Model.IsLoggedIn)
            {
                <p>
                    Enter your e-mail:<br />
                    @Html.TextBoxFor(model => model.Email)
                </p>

                <p>
                    Where are you from?<br />
                    @Html.DropDownListFor(model => model.SelectedOriginCountry, Model.Countries, new Dictionary<string, object> { { "class", "form-control sendaletter_countrylist" }, { "data-bind", "value:originCountryId" } })
                    @Html.HiddenFor(m => m.SelectedOriginCountry, new Dictionary<string, object> { { "data-bind", "value:originCountryId" } })
                </p>

            }

            <div class="row">
                <div class="col-md-3">
                    <dl>
                        <dt>Letters</dt>
                        <dd><label data-bind="text: letters().length"></label></dd>
                        <dt>Price</dt>
                        <dd>

                            <label id="priceOfLetterLbl" data-bind="text: getPriceExVat()"></label> EUR

                            @if (SessionHelper.Customer != null && SessionHelper.Customer.VatPercentage() > 0.0m)
                            {
                                <text>(<label id="priceOfLetterLbl" data-bind="text: getPriceTotal()"></label> EUR inc. local VAT)</text>
                            }
                        </dd>
                        <dt>
                            Shipping time
                        </dt>
                        <dd>1-2 Weekdays</dd>
                    </dl>
                    <input type="submit" value="Send letters now" class="btn btn-success btn-lg" />
                </div>
            </div>
        </div>


        <h2><label data-bind="text: letters().length"></label> Letters ready to be sent</h2>


        <div data-bind="foreach: letters()">
            <div class="dashboardBox" style="text-align: left;">
                <div class="row">
                    <div class="col-md-6 pull-left">
                        <h3><label data-bind="text: filePath"></label></h3>
                        
                        Pages in letter: <label>1</label><br />
                        
                        <h4>Price</h4>
                        Price (ex vat): <label data-bind="text: priceExVat"></label> EUR<br />
                        VAT:<br />
                        Price total: <label data-bind="text: priceTotal"></label> EUR

                        <br /><br />
                        <a data-bind="attr: { file_id: filePath}" id="deleteFile" class="deleteFile" style="cursor:pointer;">Delete letter</a>
                    </div>
                    <div class="col-md-6 pull-right">
                        <a data-bind="attr:{href: thumbnail()}" target="_blank">
                            <img data-bind="attr:{src: thumbnail()}" style="max-width:240px;" />
                        </a>
                    </div>
                </div>

                @*Price: <label data-bind="text: amount"></label>
                    Pages: <label data-bind="text: pages"></label>*@

                @*<div class="col-md-9" data-bind="visible: uploadFileKey().length == 1">
                        <br /><b>Your letter</b><br />
                        The grey box is where the address has to be:

                        <div style="border:1px solid #d9d9d9; max-width: 700px;">
                            <img data-bind="attr:{src: thumbnail}" style="width:100%;" />
                        </div>

                    </div>*@
            </div>
        </div>
    </div>


    @Html.HiddenFor(model => model.LetterType)
    @Html.HiddenFor(model => model.UseUploadFile)
}

<script>


    var createLetterData = {
    };

    var viewModel = new SendWindowedLetterViewModel('#sendLetterForm', createLetterData);
    ko.applyBindings(viewModel, document.getElementById('sendLetterForm'));

    $('div#myDropzone').dropzone({
        url: '@Url.Action("Upload", "SingleLetter")',
        acceptedFiles: 'application/pdf',
        maxFilesize: 100,
        addRemoveLinks: true,
        dictRemoveFile: 'Remove file',
        fallback: function () {
            $('div#myDropzone').hide();
            $('div#uploadFallbackPanel').show();
        },
        success: function (file, data) {
            var template = file.previewTemplate;
            if (data.status == "success") {
                console.log('Success upload: ' + data.key);

                $(template).find('.dz-progress').hide();
                $(template).find('.dz-details img').attr({
                    'src': '@Url.Content("~/Content/images/icons/pdf-icon.png")',
                    'height': '100',
                    'style': 'margin-top: 28px; margin-left: 20px; height: 65px; width: 65px; display: block;'
                });

                var uploadedLetter = new letter(data.key, '', 59);
                viewModel.letters.push(uploadedLetter);

                viewModel.updateAllPrices();
                console.log('letters length: ' + viewModel.letters().length);
            } else {
                $(template).find('.dz-error-message').remove();
                $(template).addClass('dz-error');
                $(template).find('.dz-error-mark').on('click', function () {
                    $(template).remove();
                });
                viewModel.uploadFileKey('');
            }
        },
        error: function (file, responseText) {
            var template = file.previewTemplate;
            $(template).remove();
            viewModel.uploadFileKey.remove(file);

        },
        removedfile: function (file) {
            var vLetters = viewModel.letters();
            for (var i = 0; i < vLetters.length; i++) {
                if (vLetters[i].filePath == file.name) {
                    viewModel.letters.splice(i, 1);
                    continue;
                }
            }

            var template = file.previewTemplate;
            $(template).remove();
            viewModel.updateAllPrices();

            console.log('remove: ' + file.name);
            console.log('letters length: ' + viewModel.letters().length);
        }
    });

    $('#fileUpload').uploadify({
        'buttonText': 'Select PDF',
        'fileTypeDesc': 'PDF Files',
        'fileTypeExts': '*.pdf',
        'fileObjName': 'uploadFile',
        'removeCompleted': false,
        'multi': true,
        'swf': '@Url.Content("~/Scripts/uploadify/uploadify.swf")',
        'uploader': '@Url.Action("Upload", "SingleLetter")',
        'onUploadSuccess': function (file, data, response) {
            //var result = $.parseJSON(data);
            //if (result.status == "success") {
            //    console.log('Upload key: ' + result.key);
            //    viewModel.uploadFileKey.push(result.key);
            //}

        },
        'onUploadError': function (ex, e, er) {
            console.log(er);
        }
    });

    $('body').on('click', 'a.deleteFile', function () {
        var val = $(this).attr('file_id');

        var vLetters = viewModel.letters();
        for (var i = 0; i < vLetters.length; i++) {
            if (vLetters[i].filePath == val) {
                viewModel.letters.splice(i, 1);
                continue;
            }
        }

        var template = 'div.dz-preview:contains(' + val + ')';
        console.log('template value: ' + template);
        $(template).remove();
    });

    $(document).ready(function () {
        $('#SelectedCountry').change(function () {
            viewModel.downloadPrices();
        });

    });
</script>
